#!/usr/bin/env python3
"""
Algoritmo de Consenso Distribuido - AEGIS Framework
Implementaci√≥n h√≠brida de consenso bizantino tolerante a fallos con optimizaciones para IA distribuida.

Caracter√≠sticas principales:
- Consenso PBFT (Practical Byzantine Fault Tolerance) optimizado
- Mecanismo de votaci√≥n ponderada por reputaci√≥n
- Consenso r√°pido para operaciones no cr√≠ticas
- Detecci√≥n y mitigaci√≥n de comportamiento bizantino
- Sincronizaci√≥n de estado distribuido
"""

import asyncio
import time
import json
import hashlib
import logging
from typing import Dict, List, Set, Optional, Tuple, Any, Callable
from dataclasses import dataclass, asdict
from enum import Enum
from collections import defaultdict, Counter

# Configuraci√≥n de logging temprana para usar logger en imports opcionales
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# aiohttp es opcional para permitir pruebas en entornos m√≠nimos (p.ej. Windows CI)
try:
    import aiohttp  # type: ignore
    HAS_AIOHTTP = True
except Exception:
    aiohttp = None  # type: ignore
    HAS_AIOHTTP = False
    logger.warning("aiohttp no disponible; algunas caracter√≠sticas de red se deshabilitar√°n en este entorno.")
from datetime import datetime, timedelta
import random

# (ya configurado arriba)

class ConsensusPhase(Enum):
    """Fases del algoritmo de consenso"""
    PREPARE = "prepare"
    PROMISE = "promise"
    PROPOSE = "propose"
    ACCEPT = "accept"
    COMMIT = "commit"
    ABORT = "abort"

class MessageType(Enum):
    """Tipos de mensajes de consenso"""
    PROPOSAL = "proposal"
    PREPARE = "prepare"
    PROMISE = "promise"
    ACCEPT = "accept"
    COMMIT = "commit"
    ABORT = "abort"
    HEARTBEAT = "heartbeat"
    VIEW_CHANGE = "view_change"

class ProposalStatus(Enum):
    """Estados de una propuesta"""
    PENDING = "pending"
    PREPARING = "preparing"
    PROMISED = "promised"
    ACCEPTED = "accepted"
    COMMITTED = "committed"
    ABORTED = "aborted"

@dataclass
class ConsensusMessage:
    """Mensaje de consenso"""
    message_id: str
    message_type: MessageType
    sender_id: str
    proposal_id: str
    view_number: int
    sequence_number: int
    data: Dict[str, Any]
    timestamp: float
    signature: str = ""

@dataclass
class Proposal:
    """Propuesta para consenso"""
    proposal_id: str
    proposer_id: str
    data: Dict[str, Any]
    timestamp: float
    view_number: int
    sequence_number: int
    status: ProposalStatus
    votes: Dict[str, bool] = None  # node_id -> vote
    signatures: List[str] = None
    priority: int = 1  # 1=low, 2=medium, 3=high, 4=critical
    
    def __post_init__(self):
        if self.votes is None:
            self.votes = {}
        if self.signatures is None:
            self.signatures = []

@dataclass
class NodeState:
    """Estado de un nodo en el consenso"""
    node_id: str
    view_number: int
    sequence_number: int
    is_leader: bool
    reputation_score: float
    last_activity: float
    byzantine_score: float = 0.0  # Puntuaci√≥n de comportamiento sospechoso
    vote_weight: float = 1.0

class ByzantineDetector:
    """Detector de comportamiento bizantino"""
    
    def __init__(self, threshold: float = 0.7):
        self.threshold = threshold
        self.behavior_history: Dict[str, List[Dict]] = defaultdict(list)
        self.reputation_scores: Dict[str, float] = defaultdict(lambda: 1.0)
        
    def record_behavior(self, node_id: str, behavior_type: str, details: Dict[str, Any]):
        """Registra comportamiento de un nodo"""
        behavior_record = {
            "type": behavior_type,
            "timestamp": time.time(),
            "details": details
        }
        
        self.behavior_history[node_id].append(behavior_record)
        
        # Mantener solo los √∫ltimos 100 registros
        if len(self.behavior_history[node_id]) > 100:
            self.behavior_history[node_id] = self.behavior_history[node_id][-100:]
        
        # Actualizar puntuaci√≥n de reputaci√≥n
        self._update_reputation_score(node_id)
    
    def _update_reputation_score(self, node_id: str):
        """Actualiza la puntuaci√≥n de reputaci√≥n de un nodo"""
        recent_behaviors = [
            b for b in self.behavior_history[node_id]
            if time.time() - b["timestamp"] < 3600  # √öltima hora
        ]
        
        if not recent_behaviors:
            return
        
        # Contar comportamientos positivos y negativos
        positive_count = sum(1 for b in recent_behaviors if b["type"] in ["correct_vote", "timely_response", "valid_proposal"])
        negative_count = sum(1 for b in recent_behaviors if b["type"] in ["incorrect_vote", "timeout", "invalid_proposal", "conflicting_messages"])
        
        total_count = len(recent_behaviors)
        if total_count > 0:
            positive_ratio = positive_count / total_count
            self.reputation_scores[node_id] = max(0.1, min(1.0, positive_ratio))
    
    def is_byzantine(self, node_id: str) -> bool:
        """Determina si un nodo muestra comportamiento bizantino"""
        return self.reputation_scores[node_id] < self.threshold
    
    def get_vote_weight(self, node_id: str) -> float:
        """Obtiene el peso de voto basado en reputaci√≥n"""
        return self.reputation_scores[node_id]

class ConsensusEngine:
    """Motor principal de consenso distribuido"""
    
    def __init__(self, node_id: str, nodes: List[str], f: int = None):
        self.node_id = node_id
        self.nodes = set(nodes)
        self.f = f or (len(nodes) - 1) // 3  # M√°ximo n√∫mero de nodos bizantinos tolerables
        
        # Estado del consenso
        self.view_number = 0
        self.sequence_number = 0
        self.current_leader = self._select_leader()
        self.node_states: Dict[str, NodeState] = {}
        
        # Propuestas y mensajes
        self.active_proposals: Dict[str, Proposal] = {}
        self.message_log: List[ConsensusMessage] = []
        self.committed_proposals: List[Proposal] = []
        
        # Componentes auxiliares
        self.byzantine_detector = ByzantineDetector()
        self.message_handlers = {
            MessageType.PROPOSAL: self._handle_proposal,
            MessageType.PREPARE: self._handle_prepare,
            MessageType.PROMISE: self._handle_promise,
            MessageType.ACCEPT: self._handle_accept,
            MessageType.COMMIT: self._handle_commit,
            MessageType.VIEW_CHANGE: self._handle_view_change
        }
        
        # Configuraci√≥n
        self.timeout_duration = 10.0  # Timeout para fases de consenso
        self.heartbeat_interval = 2.0
        self.running = False
        
        # Inicializar estados de nodos
        for node in self.nodes:
            self.node_states[node] = NodeState(
                node_id=node,
                view_number=0,
                sequence_number=0,
                is_leader=(node == self.current_leader),
                reputation_score=1.0,
                last_activity=time.time()
            )
    
    def _select_leader(self) -> str:
        """Selecciona el l√≠der actual basado en el n√∫mero de vista"""
        sorted_nodes = sorted(self.nodes)
        return sorted_nodes[self.view_number % len(sorted_nodes)]
    
    async def start_consensus_service(self):
        """Inicia el servicio de consenso"""
        self.running = True
        logger.info(f"üèõÔ∏è Iniciando servicio de consenso para nodo {self.node_id}")
        logger.info(f"üëë L√≠der actual: {self.current_leader}")
        
        # Tareas concurrentes
        tasks = [
            asyncio.create_task(self._heartbeat_loop()),
            asyncio.create_task(self._timeout_monitor()),
            asyncio.create_task(self._process_message_queue())
        ]
        
        await asyncio.gather(*tasks)
    
    async def propose(self, data: Dict[str, Any], priority: int = 1) -> str:
        """Propone un nuevo valor para consenso"""
        if not self.running:
            raise RuntimeError("Servicio de consenso no est√° ejecut√°ndose")
        
        # Solo el l√≠der puede proponer
        if self.node_id != self.current_leader:
            logger.warning(f"‚ö†Ô∏è Solo el l√≠der {self.current_leader} puede proponer")
            return None
        
        # Crear propuesta
        proposal_id = self._generate_proposal_id()
        proposal = Proposal(
            proposal_id=proposal_id,
            proposer_id=self.node_id,
            data=data,
            timestamp=time.time(),
            view_number=self.view_number,
            sequence_number=self.sequence_number,
            status=ProposalStatus.PENDING,
            priority=priority
        )
        
        self.active_proposals[proposal_id] = proposal
        logger.info(f"üìù Nueva propuesta creada: {proposal_id}")
        
        # Iniciar proceso de consenso
        await self._start_consensus_round(proposal)
        return proposal_id
    
    async def _start_consensus_round(self, proposal: Proposal):
        """Inicia una ronda de consenso para una propuesta"""
        try:
            proposal.status = ProposalStatus.PREPARING
            
            # Fase 1: Prepare
            prepare_message = ConsensusMessage(
                message_id=self._generate_message_id(),
                message_type=MessageType.PREPARE,
                sender_id=self.node_id,
                proposal_id=proposal.proposal_id,
                view_number=self.view_number,
                sequence_number=self.sequence_number,
                data={"proposal_data": proposal.data, "priority": proposal.priority},
                timestamp=time.time()
            )
            
            # Enviar prepare a todos los nodos
            await self._broadcast_message(prepare_message)
            
            # Esperar promises
            await self._wait_for_promises(proposal)
            
        except Exception as e:
            logger.error(f"‚ùå Error en ronda de consenso para {proposal.proposal_id}: {e}")
            proposal.status = ProposalStatus.ABORTED
    
    async def _wait_for_promises(self, proposal: Proposal):
        """Espera por mensajes promise de los nodos"""
        promises_received = 0
        required_promises = len(self.nodes) - self.f  # Mayor√≠a bizantina
        
        start_time = time.time()
        while promises_received < required_promises and time.time() - start_time < self.timeout_duration:
            await asyncio.sleep(0.1)
            
            # Contar promises recibidos para esta propuesta
            promises_received = sum(
                1 for msg in self.message_log
                if (msg.message_type == MessageType.PROMISE and 
                    msg.proposal_id == proposal.proposal_id and
                    msg.view_number == self.view_number)
            )
        
        if promises_received >= required_promises:
            proposal.status = ProposalStatus.PROMISED
            await self._send_accept_phase(proposal)
        else:
            logger.warning(f"‚è∞ Timeout esperando promises para {proposal.proposal_id}")
            proposal.status = ProposalStatus.ABORTED
    
    async def _send_accept_phase(self, proposal: Proposal):
        """Env√≠a fase de accept"""
        accept_message = ConsensusMessage(
            message_id=self._generate_message_id(),
            message_type=MessageType.ACCEPT,
            sender_id=self.node_id,
            proposal_id=proposal.proposal_id,
            view_number=self.view_number,
            sequence_number=self.sequence_number,
            data={"proposal_data": proposal.data},
            timestamp=time.time()
        )
        
        await self._broadcast_message(accept_message)
        await self._wait_for_accepts(proposal)
    
    async def _wait_for_accepts(self, proposal: Proposal):
        """Espera por mensajes accept de los nodos"""
        accepts_received = 0
        required_accepts = len(self.nodes) - self.f
        
        start_time = time.time()
        while accepts_received < required_accepts and time.time() - start_time < self.timeout_duration:
            await asyncio.sleep(0.1)
            
            # Contar accepts recibidos (ponderados por reputaci√≥n)
            weighted_accepts = 0
            for msg in self.message_log:
                if (msg.message_type == MessageType.ACCEPT and 
                    msg.proposal_id == proposal.proposal_id and
                    msg.view_number == self.view_number):
                    
                    vote_weight = self.byzantine_detector.get_vote_weight(msg.sender_id)
                    weighted_accepts += vote_weight
            
            accepts_received = int(weighted_accepts)
        
        if accepts_received >= required_accepts:
            proposal.status = ProposalStatus.ACCEPTED
            await self._send_commit_phase(proposal)
        else:
            logger.warning(f"‚è∞ Timeout esperando accepts para {proposal.proposal_id}")
            proposal.status = ProposalStatus.ABORTED
    
    async def _send_commit_phase(self, proposal: Proposal):
        """Env√≠a fase de commit"""
        commit_message = ConsensusMessage(
            message_id=self._generate_message_id(),
            message_type=MessageType.COMMIT,
            sender_id=self.node_id,
            proposal_id=proposal.proposal_id,
            view_number=self.view_number,
            sequence_number=self.sequence_number,
            data={"proposal_data": proposal.data},
            timestamp=time.time()
        )
        
        await self._broadcast_message(commit_message)
        
        # Marcar como comprometida
        proposal.status = ProposalStatus.COMMITTED
        self.committed_proposals.append(proposal)
        self.sequence_number += 1
        
        logger.info(f"‚úÖ Propuesta {proposal.proposal_id} comprometida exitosamente")
        
        # Ejecutar callback si existe
        await self._execute_committed_proposal(proposal)
    
    async def _execute_committed_proposal(self, proposal: Proposal):
        """Ejecuta una propuesta comprometida"""
        try:
            # Aqu√≠ se ejecutar√≠a la l√≥gica espec√≠fica de la aplicaci√≥n
            logger.info(f"üöÄ Ejecutando propuesta comprometida: {proposal.proposal_id}")
            
            # Ejemplo: actualizar estado de la aplicaci√≥n
            if "state_update" in proposal.data:
                await self._apply_state_update(proposal.data["state_update"])
            
            # Registrar comportamiento positivo del proposer
            self.byzantine_detector.record_behavior(
                proposal.proposer_id,
                "correct_proposal",
                {"proposal_id": proposal.proposal_id}
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error ejecutando propuesta {proposal.proposal_id}: {e}")
    
    async def _apply_state_update(self, state_update: Dict[str, Any]):
        """Aplica actualizaci√≥n de estado"""
        # Implementaci√≥n espec√≠fica de la aplicaci√≥n
        logger.info(f"üîÑ Aplicando actualizaci√≥n de estado: {state_update}")
    
    async def _handle_proposal(self, message: ConsensusMessage):
        """Maneja mensaje de propuesta"""
        # Solo procesar si viene del l√≠der actual
        if message.sender_id != self.current_leader:
            logger.warning(f"‚ö†Ô∏è Propuesta de nodo no l√≠der: {message.sender_id}")
            self.byzantine_detector.record_behavior(
                message.sender_id,
                "invalid_proposal",
                {"reason": "not_leader"}
            )
            return
        
        # Validar propuesta
        if self._validate_proposal(message):
            # Registrar comportamiento positivo
            self.byzantine_detector.record_behavior(
                message.sender_id,
                "valid_proposal",
                {"proposal_id": message.proposal_id}
            )
        else:
            # Registrar comportamiento sospechoso
            self.byzantine_detector.record_behavior(
                message.sender_id,
                "invalid_proposal",
                {"proposal_id": message.proposal_id}
            )
    
    async def _handle_prepare(self, message: ConsensusMessage):
        """Maneja mensaje prepare"""
        # Enviar promise si es v√°lido
        if self._validate_prepare(message):
            promise_message = ConsensusMessage(
                message_id=self._generate_message_id(),
                message_type=MessageType.PROMISE,
                sender_id=self.node_id,
                proposal_id=message.proposal_id,
                view_number=message.view_number,
                sequence_number=message.sequence_number,
                data={"accepted": True},
                timestamp=time.time()
            )
            
            await self._send_message_to_node(message.sender_id, promise_message)
            
            # Registrar comportamiento positivo
            self.byzantine_detector.record_behavior(
                message.sender_id,
                "correct_prepare",
                {"proposal_id": message.proposal_id}
            )
    
    async def _handle_promise(self, message: ConsensusMessage):
        """Maneja mensaje promise"""
        # Solo el l√≠der procesa promises
        if self.node_id == self.current_leader:
            logger.debug(f"üì® Promise recibido de {message.sender_id} para {message.proposal_id}")
            
            # Registrar comportamiento positivo
            self.byzantine_detector.record_behavior(
                message.sender_id,
                "timely_response",
                {"message_type": "promise"}
            )
    
    async def _handle_accept(self, message: ConsensusMessage):
        """Maneja mensaje accept"""
        logger.debug(f"‚úÖ Accept recibido de {message.sender_id} para {message.proposal_id}")
        
        # Registrar comportamiento positivo
        self.byzantine_detector.record_behavior(
            message.sender_id,
            "correct_vote",
            {"proposal_id": message.proposal_id}
        )
    
    async def _handle_commit(self, message: ConsensusMessage):
        """Maneja mensaje commit"""
        if message.sender_id == self.current_leader:
            # Aplicar la propuesta comprometida
            proposal_data = message.data.get("proposal_data", {})
            logger.info(f"üìã Commit recibido para propuesta: {message.proposal_id}")
            
            # Crear propuesta local si no existe
            if message.proposal_id not in self.active_proposals:
                proposal = Proposal(
                    proposal_id=message.proposal_id,
                    proposer_id=message.sender_id,
                    data=proposal_data,
                    timestamp=message.timestamp,
                    view_number=message.view_number,
                    sequence_number=message.sequence_number,
                    status=ProposalStatus.COMMITTED
                )
                self.committed_proposals.append(proposal)
                await self._execute_committed_proposal(proposal)
    
    async def _handle_view_change(self, message: ConsensusMessage):
        """Maneja cambio de vista"""
        logger.info(f"üîÑ Cambio de vista solicitado por {message.sender_id}")
        
        # Incrementar n√∫mero de vista
        self.view_number += 1
        self.current_leader = self._select_leader()
        
        # Actualizar estado de nodos
        for node_state in self.node_states.values():
            node_state.view_number = self.view_number
            node_state.is_leader = (node_state.node_id == self.current_leader)
        
        logger.info(f"üëë Nuevo l√≠der: {self.current_leader}")
    
    def _validate_proposal(self, message: ConsensusMessage) -> bool:
        """Valida una propuesta"""
        # Verificaciones b√°sicas
        if not message.data or "proposal_data" not in message.data:
            return False
        
        # Verificar secuencia
        if message.sequence_number <= self.sequence_number:
            return False
        
        # Verificar vista
        if message.view_number < self.view_number:
            return False
        
        return True
    
    def _validate_prepare(self, message: ConsensusMessage) -> bool:
        """Valida un mensaje prepare"""
        return (message.view_number >= self.view_number and
                message.sender_id == self.current_leader)
    
    async def _broadcast_message(self, message: ConsensusMessage):
        """Difunde un mensaje a todos los nodos"""
        self.message_log.append(message)
        
        for node_id in self.nodes:
            if node_id != self.node_id:
                await self._send_message_to_node(node_id, message)
    
    async def _send_message_to_node(self, node_id: str, message: ConsensusMessage):
        """Env√≠a un mensaje a un nodo espec√≠fico"""
        try:
            # En una implementaci√≥n real, esto ser√≠a una llamada HTTP/gRPC
            # Por ahora, simulamos el env√≠o
            logger.debug(f"üì§ Enviando {message.message_type.value} a {node_id}")
            
            # Simular latencia de red
            await asyncio.sleep(random.uniform(0.01, 0.1))
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje a {node_id}: {e}")
            
            # Registrar comportamiento sospechoso si hay muchos fallos
            self.byzantine_detector.record_behavior(
                node_id,
                "timeout",
                {"message_type": message.message_type.value}
            )
    
    async def _heartbeat_loop(self):
        """Loop de heartbeat para detectar nodos ca√≠dos"""
        while self.running:
            try:
                # Enviar heartbeat a todos los nodos
                heartbeat_message = ConsensusMessage(
                    message_id=self._generate_message_id(),
                    message_type=MessageType.HEARTBEAT,
                    sender_id=self.node_id,
                    proposal_id="",
                    view_number=self.view_number,
                    sequence_number=self.sequence_number,
                    data={"status": "alive"},
                    timestamp=time.time()
                )
                
                await self._broadcast_message(heartbeat_message)
                await asyncio.sleep(self.heartbeat_interval)
                
            except Exception as e:
                logger.error(f"‚ùå Error en heartbeat loop: {e}")
                await asyncio.sleep(1)
    
    async def _timeout_monitor(self):
        """Monitor de timeouts para detectar l√≠der ca√≠do"""
        while self.running:
            try:
                current_time = time.time()
                
                # Verificar si el l√≠der est√° respondiendo
                leader_state = self.node_states.get(self.current_leader)
                if leader_state and current_time - leader_state.last_activity > self.timeout_duration * 2:
                    logger.warning(f"‚è∞ L√≠der {self.current_leader} no responde, iniciando cambio de vista")
                    await self._initiate_view_change()
                
                await asyncio.sleep(self.timeout_duration / 2)
                
            except Exception as e:
                logger.error(f"‚ùå Error en monitor de timeouts: {e}")
                await asyncio.sleep(1)
    
    async def _initiate_view_change(self):
        """Inicia un cambio de vista"""
        view_change_message = ConsensusMessage(
            message_id=self._generate_message_id(),
            message_type=MessageType.VIEW_CHANGE,
            sender_id=self.node_id,
            proposal_id="",
            view_number=self.view_number + 1,
            sequence_number=self.sequence_number,
            data={"reason": "leader_timeout"},
            timestamp=time.time()
        )
        
        await self._broadcast_message(view_change_message)
    
    async def _process_message_queue(self):
        """Procesa cola de mensajes entrantes"""
        while self.running:
            try:
                # En una implementaci√≥n real, esto procesar√≠a mensajes de una cola
                # Por ahora, simplemente mantenemos el loop activo
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"‚ùå Error procesando cola de mensajes: {e}")
                await asyncio.sleep(1)
    
    def _generate_proposal_id(self) -> str:
        """Genera ID √∫nico para propuesta"""
        return f"{self.node_id}_{self.view_number}_{self.sequence_number}_{int(time.time() * 1000)}"
    
    def _generate_message_id(self) -> str:
        """Genera ID √∫nico para mensaje"""
        return f"msg_{self.node_id}_{int(time.time() * 1000000)}"
    
    async def get_consensus_status(self) -> Dict[str, Any]:
        """Obtiene estado actual del consenso"""
        return {
            "node_id": self.node_id,
            "view_number": self.view_number,
            "sequence_number": self.sequence_number,
            "current_leader": self.current_leader,
            "is_leader": self.node_id == self.current_leader,
            "active_proposals": len(self.active_proposals),
            "committed_proposals": len(self.committed_proposals),
            "byzantine_tolerance": self.f,
            "node_count": len(self.nodes),
            "reputation_scores": dict(self.byzantine_detector.reputation_scores),
            "running": self.running
        }

# Funci√≥n principal para testing
async def main():
    """Funci√≥n principal para pruebas"""
    # Simular red de 4 nodos (tolera 1 bizantino)
    nodes = ["node_1", "node_2", "node_3", "node_4"]
    
    # Crear motor de consenso para node_1
    consensus = ConsensusEngine("node_1", nodes)
    
    # Mostrar estado inicial
    status = await consensus.get_consensus_status()
    print("üèõÔ∏è Estado inicial del consenso:")
    print(json.dumps(status, indent=2))
    
    # Simular propuesta si es l√≠der
    if consensus.node_id == consensus.current_leader:
        proposal_data = {
            "operation": "update_model_weights",
            "model_id": "gpt_distributed_v1",
            "weights_hash": "abc123def456",
            "timestamp": time.time()
        }
        
        print(f"üìù Proponiendo actualizaci√≥n de modelo...")
        proposal_id = await consensus.propose(proposal_data, priority=3)
        print(f"‚úÖ Propuesta creada: {proposal_id}")
    
    print("üöÄ Motor de consenso inicializado correctamente")

def start_consensus_loop(config: Dict[str, Any]):
    """Adapter de arranque para ConsensusEngine compatible con main.py.
    Crea el motor y lanza el servicio asincr√≥nico sin bloquear.
    """
    try:
        node_id = config.get("node_id", "node_local")
        nodes = config.get("nodes") or [node_id]
        consensus = ConsensusEngine(node_id=node_id, nodes=nodes)
        loop = asyncio.get_event_loop()
        loop.create_task(consensus.start_consensus_service())
        logger.info(f"üèõÔ∏è ConsensusEngine iniciado (node_id={node_id}, nodes={len(nodes)})")
        return consensus
    except Exception as e:
        logger.error(f"‚ùå No se pudo iniciar el bucle de consenso: {e}")
        return None

if __name__ == "__main__":
    asyncio.run(main())