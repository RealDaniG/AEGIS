name: AEGIS CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test-matrix:
    name: Test on Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, '3.10', 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
      shell: bash

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
      shell: bash

    - name: Run Open-A.G.I integration tests
      run: |
        python -m pytest Open-A.G.I/tests/ -v --tb=short
      shell: bash
      continue-on-error: true

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: realdanig/aegis
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image (Multi-arch)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-sbom:
    name: Security Scan & SBOM Generation
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

    - name: Run vulnerability scan
      uses: anchore/scan-action@v3
      with:
        path: "."
        fail-build: false

  cosign-sign:
    name: Sign Docker Images
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cosign
      uses: sigstore/cosign-installer@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Sign images with GitHub Actions OIDC token
      run: |
        cosign sign --yes realdanig/aegis:latest
      env:
        COSIGN_EXPERIMENTAL: 1

  deploy-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate deployment orchestrator
      run: |
        python -c "from Open_A_G_I.deployment_orchestrator import DeploymentOrchestrator; print('Deployment orchestrator imported successfully')"
      continue-on-error: true

    - name: Validate unified coordinator integration
      run: |
        python -c "from unified_coordinator import UnifiedCoordinator; print('Unified coordinator imported successfully')"
      continue-on-error: true

  notification:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [test-matrix, docker-build, security-sbom, cosign-sign, deploy-validation]
    if: always()
    
    steps:
    - name: Send Slack notification
      if: failure() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#aegis-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      continue-on-error: true