name: AEGIS CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test-matrix:
    name: Test on Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, '3.10', 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Check if requirements-test.txt exists in the root or Open-A.G.I directory
        if [ -f "requirements-test.txt" ]; then 
          pip install -r requirements-test.txt
        elif [ -f "Open-A.G.I/requirements-test.txt" ]; then 
          pip install -r Open-A.G.I/requirements-test.txt
        fi
      shell: bash

    - name: Create necessary directories
      run: |
        # Use Python to create directories in a cross-platform way
        python -c "import os; dirs = ['test_logs', 'test_backups', 'test_reports', 'test_source']; [os.makedirs(d, exist_ok=True) for d in dirs]"
      shell: python

    - name: Set up environment variables
      run: |
        # Use Python to set environment variables in a cross-platform way
        import os
        github_env = os.environ.get('GITHUB_ENV')
        workspace = os.environ.get('GITHUB_WORKSPACE')
        
        # Create a comprehensive PYTHONPATH that includes all necessary directories
        python_paths = [
            workspace,
            os.path.join(workspace, 'Open-A.G.I'),
            os.path.join(workspace, 'integrated_components'),
            os.path.join(workspace, 'Metatron-ConscienceAI'),
            os.path.join(workspace, 'Metatron-ConscienceAI', 'orchestrator'),
            os.path.join(workspace, 'Metatron-ConscienceAI', 'nodes')
        ]
        
        pythonpath = ':'.join(python_paths) if os.name != 'nt' else ';'.join(python_paths)
        
        with open(github_env, 'a') as f:
            f.write(f'PYTHONPATH={pythonpath}\n')
            f.write(f'TEST_LOGS_DIR={workspace}/test_logs\n')
      shell: python

    - name: Verify Python path
      run: |
        python -c "import sys; print('Python path:'); [print(p) for p in sys.path]"
        echo "PYTHONPATH: $PYTHONPATH"
      shell: bash

    - name: Run unit tests
      run: |
        python -m pytest tests/unit_tests/ -v --tb=short
      shell: bash

    - name: Run integration tests
      run: |
        python -m pytest tests/integration_tests/ -v --tb=short
      shell: bash

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: realdanig/aegis
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image (Multi-arch)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-sbom:
    name: Security Scan & SBOM Generation
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

    - name: Run vulnerability scan
      uses: anchore/scan-action@v3
      with:
        path: "."
        fail-build: false

  cosign-sign:
    name: Sign Docker Images
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cosign
      uses: sigstore/cosign-installer@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Sign images with GitHub Actions OIDC token
      run: |
        cosign sign --yes realdanig/aegis:latest
      env:
        COSIGN_EXPERIMENTAL: 1

  deploy-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate deployment orchestrator
      run: |
        python -c "from Open_A_G_I.deployment_orchestrator import DeploymentOrchestrator; print('Deployment orchestrator imported successfully')"
      continue-on-error: true

    - name: Validate unified coordinator integration
      run: |
        python -c "from unified_coordinator import UnifiedCoordinator; print('Unified coordinator imported successfully')"
      continue-on-error: true

  notification:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [test-matrix, docker-build, security-sbom, cosign-sign, deploy-validation]
    if: always()
    
    steps:
    - name: Send Slack notification
      if: failure() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#aegis-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      continue-on-error: true