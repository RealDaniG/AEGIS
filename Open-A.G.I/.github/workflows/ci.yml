name: AEGIS CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  release:
    types: [published]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  lint-and-test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path -Path "requirements-test.txt") { pip install -r requirements-test.txt } elseif (Test-Path -Path "requirements.txt") { pip install -r requirements.txt }
          pip install pytest flake8 bandit pip-audit

      - name: Lint (flake8)
        run: |
          flake8 .

      - name: Run tests
        run: |
          pytest -q tests

      - name: Security scan (pip-audit)
        continue-on-error: true
        run: |
          pip-audit -f json -o pip-audit.json || exit 0

      - name: Upload pip-audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-${{ matrix.python-version }}
          path: pip-audit.json

      - name: Security scan (bandit)
        continue-on-error: true
        run: |
          bandit -r . -f json -o bandit.json || exit 0

      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-${{ matrix.python-version }}
          path: bandit.json

  linux-lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; elif [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest flake8 bandit pip-audit

      - name: Lint (flake8)
        run: |
          flake8 .

      - name: Run tests
        run: |
          pytest -q tests

      - name: Security scan (pip-audit)
        continue-on-error: true
        run: |
          pip-audit -f json -o pip-audit.json || exit 0

      - name: Upload pip-audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-ubuntu-${{ matrix.python-version }}
          path: pip-audit.json

      - name: Security scan (bandit)
        continue-on-error: true
        run: |
          bandit -r . -f json -o bandit.json || exit 0

      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-ubuntu-${{ matrix.python-version }}
          path: bandit.json

  docker-smoke-test:
    needs: [lint-and-test, linux-lint-and-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=sha
            type=ref,event=push
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build (with cache) for local smoke test
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: aegis-ci:local
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Smoke test in container (python main.py --dry-run)
        run: |
          docker run --rm aegis-ci:local python main.py --dry-run

      - name: Build and push to GHCR (main or release)
        if: github.event_name == 'release' || (github.event_name != 'pull_request' && github.ref == 'refs/heads/main')
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM (SPDX) for local image
        uses: anchore/sbom-action@v0
        with:
          image: aegis-ci:local
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: sbom.spdx.json

      - name: Install Cosign
        if: github.event_name == 'release' || (github.event_name != 'pull_request' && github.ref == 'refs/heads/main')
        uses: sigstore/cosign-installer@v3

      - name: Sign GHCR image(s) with Cosign (keyless)
        if: github.event_name == 'release' || (github.event_name != 'pull_request' && github.ref == 'refs/heads/main')
        env:
          COSIGN_EXPERIMENTAL: true
        run: |
          echo "Signing tags:"
          echo "${{ steps.meta.outputs.tags }}"
          while IFS= read -r tag; do
            echo "Signing ghcr.io/${{ github.repository }}:${tag}"
          cosign sign --yes ghcr.io/${{ github.repository }}:${tag}
          done <<< "${{ steps.meta.outputs.tags }}"

  verify-and-release-assets:
    needs: [docker-smoke-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name != 'pull_request' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (tags to verify)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=sha
            type=ref,event=push
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Verify GHCR image signatures with Cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: true
        run: |
          echo "Verifying signed tags:"
          echo "${{ steps.meta.outputs.tags }}"
          while IFS= read -r tag; do
            echo "Verifying ghcr.io/${{ github.repository }}:${tag}"
            cosign verify ghcr.io/${{ github.repository }}:${tag} || exit 1
          done <<< "${{ steps.meta.outputs.tags }}"

      - name: Download SBOM artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom-spdx
          path: .

      - name: Compute SBOM checksum (sha256)
        run: |
          sha256sum sbom.spdx.json > sbom.spdx.json.sha256

      - name: Upload SBOM checksum artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx-sha256
          path: sbom.spdx.json.sha256

      - name: Publish SBOM to release assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            sbom.spdx.json
            sbom.spdx.json.sha256

  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gitleaks secret scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: --verbose --redact --report-format json --report-path gitleaks.json
        continue-on-error: true

      - name: Upload gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.json