#!/usr/bin/env python3
"""
Script para crear todas las tareas del proyecto AEGIS Framework en Archon MCP
usando la interfaz web directamente.
"""

import json
import time
from pathlib import Path

# ID del proyecto creado
# Actualizado para el proyecto solicitado por el usuario
PROJECT_ID = "3be97fb2-933c-4284-9990-eff927ea6a06"

# Tareas completadas
completed_tasks = [
    {
        "title": "An√°lisis de Seguridad P2P - Vectores de Ataque",
        "description": "An√°lisis exhaustivo de vectores de ataque en arquitecturas P2P distribuidas: Sybil, Eclipse, Data Poisoning, Timing attacks. Implementaci√≥n de mitigaciones espec√≠ficas.",
        "feature": "Seguridad y Criptograf√≠a",
        "task_order": 10,
        "estimated_hours": 8,
        "status": "done"
    },
    {
        "title": "Framework Criptogr√°fico - Autenticaci√≥n y Cifrado",
        "description": "Implementaci√≥n completa del sistema criptogr√°fico: Ed25519 para autenticaci√≥n, ChaCha20-Poly1305 para cifrado, X25519 para intercambio de claves, Double Ratchet para forward secrecy.",
        "feature": "Seguridad y Criptograf√≠a",
        "task_order": 10,
        "estimated_hours": 12,
        "status": "done"
    },
    {
        "title": "Integraci√≥n TOR - Gateway An√≥nimo",
        "description": "Implementaci√≥n del gateway TOR para comunicaciones an√≥nimas: gesti√≥n de circuitos, selecci√≥n de nodos, rotaci√≥n autom√°tica, resistencia a ataques de correlaci√≥n.",
        "feature": "Red TOR y Anonimato",
        "task_order": 10,
        "estimated_hours": 10,
        "status": "done"
    },
    {
        "title": "Protocolo de Consenso Bizantino - PBFT Optimizado",
        "description": "Implementaci√≥n del algoritmo PBFT con optimizaciones para redes P2P: tolerancia a fallos bizantinos, validaci√≥n de transacciones, sincronizaci√≥n de estado distribuido.",
        "feature": "Consenso Distribuido",
        "task_order": 10,
        "estimated_hours": 15,
        "status": "done"
    },
    {
        "title": "Sistema de Asignaci√≥n Din√°mica de Recursos",
        "description": "Gestor inteligente de recursos computacionales: balanceador de carga adaptativo, monitoreo en tiempo real, asignaci√≥n basada en capacidades y demanda.",
        "feature": "Gesti√≥n de Recursos",
        "task_order": 10,
        "estimated_hours": 15,
        "status": "done"
    }
]

# Tarea en progreso
current_task = {
    "title": "Mecanismos de Tolerancia a Fallos y Recuperaci√≥n de Nodos",
    "description": "Sistema robusto de detecci√≥n y recuperaci√≥n de fallos: heartbeat distribuido, detecci√≥n de nodos ca√≠dos, replicaci√≥n de datos, recuperaci√≥n autom√°tica, balanceador de carga resiliente.",
    "feature": "Tolerancia a Fallos",
    "task_order": 9,
    "estimated_hours": 18,
    # Marcar como completada seg√∫n solicitud
    "status": "done"
}

# Tareas pendientes
pending_tasks = [
    {
        "title": "Optimizaci√≥n de Algoritmos de Consenso",
        "description": "Mejoras de rendimiento en PBFT: reducci√≥n de latencia, optimizaci√≥n de mensajes, paralelizaci√≥n de validaciones, t√©cnicas de batching.",
        "feature": "Consenso Distribuido",
        "task_order": 8,
        "estimated_hours": 12,
        # Marcar como completada seg√∫n solicitud
        "status": "done"
    },
    {
        "title": "Sistema de M√©tricas y Monitoreo Distribuido",
        "description": "Plataforma de observabilidad: m√©tricas de rendimiento, trazabilidad distribuida, alertas inteligentes, dashboards en tiempo real.",
        "feature": "Monitoreo y M√©tricas",
        "task_order": 7,
        "estimated_hours": 14,
        # Marcar como completada seg√∫n solicitud
        "status": "done"
    },
    {
        "title": "Pruebas de Carga y Estr√©s Distribuidas",
        "description": "Suite de testing: simulaci√≥n de redes P2P masivas, pruebas de resistencia a ataques, benchmarks de rendimiento, an√°lisis de escalabilidad.",
        "feature": "Testing y Validaci√≥n",
        "task_order": 6,
        "estimated_hours": 16,
        # Marcar como completada seg√∫n solicitud
        "status": "done"
    },
    {
        "title": "Documentaci√≥n T√©cnica y Arquitectural",
        "description": "Documentaci√≥n completa: especificaciones de protocolos, gu√≠as de implementaci√≥n, diagramas de arquitectura, manuales de operaci√≥n.",
        "feature": "Testing y Validaci√≥n",
        "task_order": 5,
        "estimated_hours": 10,
        # Marcar como completada seg√∫n solicitud
        "status": "done"
    }
]

def create_task_commands():
    """Genera comandos curl para crear todas las tareas"""
    all_tasks = completed_tasks + [current_task] + pending_tasks
    
    commands = []
    for i, task in enumerate(all_tasks, 1):
        task_with_project = {
            "project_id": PROJECT_ID,
            **task
        }
        
        json_str = json.dumps(task_with_project, ensure_ascii=False)
        command = f'curl -X POST "http://localhost:8181/api/tasks" -H "Content-Type: application/json" -d \'{json_str}\''
        commands.append(f"# Tarea {i}: {task['title']}")
        commands.append(command)
        commands.append("")
    
    return commands

def main():
    """Funci√≥n principal"""
    print("üöÄ Generando comandos para crear tareas en Archon MCP...")
    
    commands = create_task_commands()
    
    # Guardar comandos en archivo
    commands_file = Path("archon_task_commands.sh")
    with open(commands_file, "w", encoding="utf-8") as f:
        f.write("#!/bin/bash\n")
        f.write("# Comandos para crear todas las tareas del proyecto AEGIS Framework\n\n")
        f.write(f"PROJECT_ID=\"{PROJECT_ID}\"\n\n")
        f.write("\n".join(commands))
    
    print(f"‚úÖ Comandos guardados en: {commands_file}")
    print(f"üìä Total de tareas a crear: {len(completed_tasks + [current_task] + pending_tasks)}")
    print(f"   - Completadas: {len(completed_tasks)}")
    print(f"   - En progreso: 1")
    print(f"   - Pendientes: {len(pending_tasks)}")
    
    # Crear resumen del proyecto
    summary = {
        "project_id": PROJECT_ID,
        "project_title": "IA Distribuida y Colaborativa - AEGIS Framework",
        "total_tasks": len(completed_tasks + [current_task] + pending_tasks),
        "completed_tasks": len(completed_tasks),
        "in_progress_tasks": 1,
        "pending_tasks": len(pending_tasks),
        "total_hours": sum(t["estimated_hours"] for t in completed_tasks + [current_task] + pending_tasks),
        "completed_hours": sum(t["estimated_hours"] for t in completed_tasks),
        "features": {
            "Seguridad y Criptograf√≠a": 2,
            "Red TOR y Anonimato": 1,
            "Consenso Distribuido": 2,
            "Gesti√≥n de Recursos": 1,
            "Tolerancia a Fallos": 1,
            "Monitoreo y M√©tricas": 1,
            "Testing y Validaci√≥n": 2
        }
    }
    
    with open("archon_project_summary.json", "w", encoding="utf-8") as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    print(f"üìã Resumen del proyecto guardado en: archon_project_summary.json")
    
    return commands

if __name__ == "__main__":
    main()